'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="StoreDB")>  _
Partial Public Class StoreDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertStore(instance As Store)
    End Sub
  Partial Private Sub UpdateStore(instance As Store)
    End Sub
  Partial Private Sub DeleteStore(instance As Store)
    End Sub
  Partial Private Sub InsertUsers_Store(instance As Users_Store)
    End Sub
  Partial Private Sub UpdateUsers_Store(instance As Users_Store)
    End Sub
  Partial Private Sub DeleteUsers_Store(instance As Users_Store)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.DesktopApp.My.MySettings.Default.StoreDBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property Stores() As System.Data.Linq.Table(Of Store)
		Get
			Return Me.GetTable(Of Store)
		End Get
	End Property
	
	Public ReadOnly Property Users_Stores() As System.Data.Linq.Table(Of Users_Store)
		Get
			Return Me.GetTable(Of Users_Store)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Username As String
	
	Private _HashedPassword As String
	
	Private _StoreID As Integer
	
	Private _Users_Stores As EntitySet(Of Users_Store)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnHashedPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnHashedPasswordChanged()
    End Sub
    Partial Private Sub OnStoreIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStoreIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Users_Stores = New EntitySet(Of Users_Store)(AddressOf Me.attach_Users_Stores, AddressOf Me.detach_Users_Stores)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HashedPassword", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HashedPassword() As String
		Get
			Return Me._HashedPassword
		End Get
		Set
			If (String.Equals(Me._HashedPassword, value) = false) Then
				Me.OnHashedPasswordChanging(value)
				Me.SendPropertyChanging
				Me._HashedPassword = value
				Me.SendPropertyChanged("HashedPassword")
				Me.OnHashedPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreID", DbType:="Int NOT NULL")>  _
	Public Property StoreID() As Integer
		Get
			Return Me._StoreID
		End Get
		Set
			If ((Me._StoreID = value)  _
						= false) Then
				Me.OnStoreIDChanging(value)
				Me.SendPropertyChanging
				Me._StoreID = value
				Me.SendPropertyChanged("StoreID")
				Me.OnStoreIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Users_Store", Storage:="_Users_Stores", ThisKey:="ID", OtherKey:="UserID")>  _
	Public Property Users_Stores() As EntitySet(Of Users_Store)
		Get
			Return Me._Users_Stores
		End Get
		Set
			Me._Users_Stores.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Users_Stores(ByVal entity As Users_Store)
		Me.SendPropertyChanging
		entity.User = Me
	End Sub
	
	Private Sub detach_Users_Stores(ByVal entity As Users_Store)
		Me.SendPropertyChanging
		entity.User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Stores")>  _
Partial Public Class Store
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Store_Name As String
	
	Private _Store_Logo As System.Data.Linq.Binary
	
	Private _Store_Marketing_Line As String
	
	Private _Users_Stores As EntitySet(Of Users_Store)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnStore_NameChanging(value As String)
    End Sub
    Partial Private Sub OnStore_NameChanged()
    End Sub
    Partial Private Sub OnStore_LogoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnStore_LogoChanged()
    End Sub
    Partial Private Sub OnStore_Marketing_LineChanging(value As String)
    End Sub
    Partial Private Sub OnStore_Marketing_LineChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Users_Stores = New EntitySet(Of Users_Store)(AddressOf Me.attach_Users_Stores, AddressOf Me.detach_Users_Stores)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Store_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Store_Name() As String
		Get
			Return Me._Store_Name
		End Get
		Set
			If (String.Equals(Me._Store_Name, value) = false) Then
				Me.OnStore_NameChanging(value)
				Me.SendPropertyChanging
				Me._Store_Name = value
				Me.SendPropertyChanged("Store_Name")
				Me.OnStore_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Store_Logo", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Store_Logo() As System.Data.Linq.Binary
		Get
			Return Me._Store_Logo
		End Get
		Set
			If (Object.Equals(Me._Store_Logo, value) = false) Then
				Me.OnStore_LogoChanging(value)
				Me.SendPropertyChanging
				Me._Store_Logo = value
				Me.SendPropertyChanged("Store_Logo")
				Me.OnStore_LogoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Store_Marketing_Line", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Store_Marketing_Line() As String
		Get
			Return Me._Store_Marketing_Line
		End Get
		Set
			If (String.Equals(Me._Store_Marketing_Line, value) = false) Then
				Me.OnStore_Marketing_LineChanging(value)
				Me.SendPropertyChanging
				Me._Store_Marketing_Line = value
				Me.SendPropertyChanged("Store_Marketing_Line")
				Me.OnStore_Marketing_LineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Store_Users_Store", Storage:="_Users_Stores", ThisKey:="ID", OtherKey:="StoreID")>  _
	Public Property Users_Stores() As EntitySet(Of Users_Store)
		Get
			Return Me._Users_Stores
		End Get
		Set
			Me._Users_Stores.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Users_Stores(ByVal entity As Users_Store)
		Me.SendPropertyChanging
		entity.Store = Me
	End Sub
	
	Private Sub detach_Users_Stores(ByVal entity As Users_Store)
		Me.SendPropertyChanging
		entity.Store = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users_Stores")>  _
Partial Public Class Users_Store
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _UserID As Integer
	
	Private _StoreID As Integer
	
	Private _User As EntityRef(Of User)
	
	Private _Store As EntityRef(Of Store)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnStoreIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStoreIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._User = CType(Nothing, EntityRef(Of User))
		Me._Store = CType(Nothing, EntityRef(Of Store))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StoreID", DbType:="Int NOT NULL")>  _
	Public Property StoreID() As Integer
		Get
			Return Me._StoreID
		End Get
		Set
			If ((Me._StoreID = value)  _
						= false) Then
				If Me._Store.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStoreIDChanging(value)
				Me.SendPropertyChanging
				Me._StoreID = value
				Me.SendPropertyChanged("StoreID")
				Me.OnStoreIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Users_Store", Storage:="_User", ThisKey:="UserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.Users_Stores.Remove(Me)
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Users_Stores.Add(Me)
					Me._UserID = value.ID
				Else
					Me._UserID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Store_Users_Store", Storage:="_Store", ThisKey:="StoreID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Store() As Store
		Get
			Return Me._Store.Entity
		End Get
		Set
			Dim previousValue As Store = Me._Store.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Store.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Store.Entity = Nothing
					previousValue.Users_Stores.Remove(Me)
				End If
				Me._Store.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Users_Stores.Add(Me)
					Me._StoreID = value.ID
				Else
					Me._StoreID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Store")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
